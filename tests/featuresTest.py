import unittest

from features import Feature
from consts import Consts
from history import Histories


class FeaturesTestCase(unittest.TestCase):
    def test_feature_100(self):
        feature = Feature("trialDataFiles/trialOneSentence.wtag")
        feature.feature_100()
        expected_feature_vector = {('100', ('the', 'DT')): [0, 3], ('100', ('treasury', 'NNP')): [1, 1],
                                   ('100', ('is', 'VBZ')): [2, 1], ('100', ('still', 'RB')): [3, 1],
                                   ('100', ('working', 'VBG')): [4, 1], ('100', ('out', 'RP')): [5, 1],
                                   ('100', ('details', 'NNS')): [6, 1], ('100', ('with', 'IN')): [7, 1],
                                   ('100', ('bank', 'NN')): [8, 1], ('100', ('trade', 'NN')): [9, 1],
                                   ('100', ('associations', 'NNS')): [10, 1], ('100', ('and', 'CC')): [11, 1],
                                   ('100', ('other', 'JJ')): [12, 1], ('100', ('government', 'NN')): [13, 1],
                                   ('100', ('agencies', 'NNS')): [14, 1], ('100', ('that', 'WDT')): [15, 1],
                                   ('100', ('have', 'VBP')): [16, 1], ('100', ('a', 'DT')): [17, 1],
                                   ('100', ('hand', 'NN')): [18, 1], ('100', ('in', 'IN')): [19, 1],
                                   ('100', ('fighting', 'VBG')): [20, 1], ('100', ('money', 'NN')): [21, 1],
                                   ('100', ('laundering', 'NN')): [22, 1], ('100', ('.', '.')): [23, 1]}
        self.assertEqual(feature.feature_vector, expected_feature_vector)

        feature = Feature("trialDataFiles/trialTwoSentences.wtag")
        feature.feature_100()
        expected_feature_vector = {('100', ('the', 'DT')): [0, 6], ('100', ('treasury', 'NNP')): [1, 2],
                                   ('100', ('is', 'VBZ')): [2, 2], ('100', ('still', 'RB')): [3, 1],
                                   ('100', ('working', 'VBG')): [4, 1], ('100', ('out', 'RP')): [5, 1],
                                   ('100', ('details', 'NNS')): [6, 1], ('100', ('with', 'IN')): [7, 1],
                                   ('100', ('bank', 'NN')): [8, 1], ('100', ('trade', 'NN')): [9, 1],
                                   ('100', ('associations', 'NNS')): [10, 1], ('100', ('and', 'CC')): [11, 2],
                                   ('100', ('other', 'JJ')): [12, 1], ('100', ('government', 'NN')): [13, 1],
                                   ('100', ('agencies', 'NNS')): [14, 1], ('100', ('that', 'WDT')): [15, 1],
                                   ('100', ('have', 'VBP')): [16, 1], ('100', ('a', 'DT')): [17, 1],
                                   ('100', ('hand', 'NN')): [18, 1], ('100', ('in', 'IN')): [19, 1],
                                   ('100', ('fighting', 'VBG')): [20, 1], ('100', ('money', 'NN')): [21, 1],
                                   ('100', ('laundering', 'NN')): [22, 1], ('100', ('.', '.')): [23, 2],
                                   ('100', ('among', 'IN')): [24, 1], ('100', ('possibilities', 'NNS')): [25, 1],
                                   ('100', ('considering', 'VBG')): [26, 1], ('100', ('are', 'VBP')): [27, 1],
                                   ('100', ('requirements', 'NNS')): [28, 1], ('100', ('that', 'IN')): [29, 1],
                                   ('100', ('banks', 'NNS')): [30, 1], ('100', ('keep', 'VB')): [31, 1],
                                   ('100', ('records', 'NNS')): [32, 1], ('100', ('identifying', 'VBG')): [33, 1],
                                   ('100', ('originators', 'NNS')): [34, 1], ('100', ('recipients', 'NNS')): [35, 1],
                                   ('100', ('of', 'IN')): [36, 1], ('100', ('international', 'JJ')): [37, 1],
                                   ('100', ('wire', 'NN')): [38, 1], ('100', ('transfers', 'NNS')): [39, 1]}
        self.assertEqual(feature.feature_vector, expected_feature_vector)

    def test_feature_101(self):
        feature = Feature("trialDataFiles/trialOneSentence.wtag")
        feature.feature_101()
        expected_feature_vector = {('101', ('e', 'DT')): [0, 3], ('101', ('he', 'DT')): [1, 3],
                                   ('101', ('the', 'DT')): [2, 3], ('101', ('y', 'NNP')): [3, 1],
                                   ('101', ('ry', 'NNP')): [4, 1], ('101', ('ury', 'NNP')): [5, 1],
                                   ('101', ('sury', 'NNP')): [6, 1], ('101', ('s', 'VBZ')): [7, 1],
                                   ('101', ('is', 'VBZ')): [8, 1], ('101', ('l', 'RB')): [9, 1],
                                   ('101', ('ll', 'RB')): [10, 1], ('101', ('ill', 'RB')): [11, 1],
                                   ('101', ('till', 'RB')): [12, 1], ('101', ('g', 'VBG')): [13, 2],
                                   ('101', ('ng', 'VBG')): [14, 2], ('101', ('ing', 'VBG')): [15, 2],
                                   ('101', ('king', 'VBG')): [16, 1], ('101', ('t', 'RP')): [17, 1],
                                   ('101', ('ut', 'RP')): [18, 1], ('101', ('out', 'RP')): [19, 1],
                                   ('101', ('s', 'NNS')): [20, 3], ('101', ('ls', 'NNS')): [21, 1],
                                   ('101', ('ils', 'NNS')): [22, 1], ('101', ('ails', 'NNS')): [23, 1],
                                   ('101', ('h', 'IN')): [24, 1], ('101', ('th', 'IN')): [25, 1],
                                   ('101', ('ith', 'IN')): [26, 1], ('101', ('with', 'IN')): [27, 1],
                                   ('101', ('k', 'NN')): [28, 1], ('101', ('nk', 'NN')): [29, 1],
                                   ('101', ('ank', 'NN')): [30, 1], ('101', ('bank', 'NN')): [31, 1],
                                   ('101', ('e', 'NN')): [32, 1], ('101', ('de', 'NN')): [33, 1],
                                   ('101', ('ade', 'NN')): [34, 1], ('101', ('rade', 'NN')): [35, 1],
                                   ('101', ('ns', 'NNS')): [36, 1], ('101', ('ons', 'NNS')): [37, 1],
                                   ('101', ('ions', 'NNS')): [38, 1], ('101', ('d', 'CC')): [39, 1],
                                   ('101', ('nd', 'CC')): [40, 1], ('101', ('and', 'CC')): [41, 1],
                                   ('101', ('r', 'JJ')): [42, 1], ('101', ('er', 'JJ')): [43, 1],
                                   ('101', ('her', 'JJ')): [44, 1], ('101', ('ther', 'JJ')): [45, 1],
                                   ('101', ('t', 'NN')): [46, 1], ('101', ('nt', 'NN')): [47, 1],
                                   ('101', ('ent', 'NN')): [48, 1], ('101', ('ment', 'NN')): [49, 1],
                                   ('101', ('es', 'NNS')): [50, 1], ('101', ('ies', 'NNS')): [51, 1],
                                   ('101', ('cies', 'NNS')): [52, 1], ('101', ('t', 'WDT')): [53, 1],
                                   ('101', ('at', 'WDT')): [54, 1], ('101', ('hat', 'WDT')): [55, 1],
                                   ('101', ('that', 'WDT')): [56, 1], ('101', ('e', 'VBP')): [57, 1],
                                   ('101', ('ve', 'VBP')): [58, 1], ('101', ('ave', 'VBP')): [59, 1],
                                   ('101', ('have', 'VBP')): [60, 1], ('101', ('a', 'DT')): [61, 1],
                                   ('101', ('d', 'NN')): [62, 1], ('101', ('nd', 'NN')): [63, 1],
                                   ('101', ('and', 'NN')): [64, 1], ('101', ('hand', 'NN')): [65, 1],
                                   ('101', ('n', 'IN')): [66, 1], ('101', ('in', 'IN')): [67, 1],
                                   ('101', ('ting', 'VBG')): [68, 1], ('101', ('y', 'NN')): [69, 1],
                                   ('101', ('ey', 'NN')): [70, 1], ('101', ('ney', 'NN')): [71, 1],
                                   ('101', ('oney', 'NN')): [72, 1], ('101', ('g', 'NN')): [73, 1],
                                   ('101', ('ng', 'NN')): [74, 1], ('101', ('ing', 'NN')): [75, 1],
                                   ('101', ('ring', 'NN')): [76, 1], ('101', ('.', '.')): [77, 1]}
        self.assertEqual(feature.feature_vector, expected_feature_vector)

        feature = Feature("trialDataFiles/trialOneSentence.wtag")
        feature.feature_100()
        feature.feature_101()
        expected_feature_vector = {('100', ('the', 'DT')): [0, 3], ('100', ('treasury', 'NNP')): [1, 1],
                                   ('100', ('is', 'VBZ')): [2, 1], ('100', ('still', 'RB')): [3, 1],
                                   ('100', ('working', 'VBG')): [4, 1], ('100', ('out', 'RP')): [5, 1],
                                   ('100', ('details', 'NNS')): [6, 1], ('100', ('with', 'IN')): [7, 1],
                                   ('100', ('bank', 'NN')): [8, 1], ('100', ('trade', 'NN')): [9, 1],
                                   ('100', ('associations', 'NNS')): [10, 1], ('100', ('and', 'CC')): [11, 1],
                                   ('100', ('other', 'JJ')): [12, 1], ('100', ('government', 'NN')): [13, 1],
                                   ('100', ('agencies', 'NNS')): [14, 1], ('100', ('that', 'WDT')): [15, 1],
                                   ('100', ('have', 'VBP')): [16, 1], ('100', ('a', 'DT')): [17, 1],
                                   ('100', ('hand', 'NN')): [18, 1], ('100', ('in', 'IN')): [19, 1],
                                   ('100', ('fighting', 'VBG')): [20, 1], ('100', ('money', 'NN')): [21, 1],
                                   ('100', ('laundering', 'NN')): [22, 1], ('100', ('.', '.')): [23, 1],
                                   ('101', ('e', 'DT')): [24, 3], ('101', ('he', 'DT')): [25, 3],
                                   ('101', ('the', 'DT')): [26, 3], ('101', ('y', 'NNP')): [27, 1],
                                   ('101', ('ry', 'NNP')): [28, 1], ('101', ('ury', 'NNP')): [29, 1],
                                   ('101', ('sury', 'NNP')): [30, 1], ('101', ('s', 'VBZ')): [31, 1],
                                   ('101', ('is', 'VBZ')): [32, 1], ('101', ('l', 'RB')): [33, 1],
                                   ('101', ('ll', 'RB')): [34, 1], ('101', ('ill', 'RB')): [35, 1],
                                   ('101', ('till', 'RB')): [36, 1], ('101', ('g', 'VBG')): [37, 2],
                                   ('101', ('ng', 'VBG')): [38, 2], ('101', ('ing', 'VBG')): [39, 2],
                                   ('101', ('king', 'VBG')): [40, 1], ('101', ('t', 'RP')): [41, 1],
                                   ('101', ('ut', 'RP')): [42, 1], ('101', ('out', 'RP')): [43, 1],
                                   ('101', ('s', 'NNS')): [44, 3], ('101', ('ls', 'NNS')): [45, 1],
                                   ('101', ('ils', 'NNS')): [46, 1], ('101', ('ails', 'NNS')): [47, 1],
                                   ('101', ('h', 'IN')): [48, 1], ('101', ('th', 'IN')): [49, 1],
                                   ('101', ('ith', 'IN')): [50, 1], ('101', ('with', 'IN')): [51, 1],
                                   ('101', ('k', 'NN')): [52, 1], ('101', ('nk', 'NN')): [53, 1],
                                   ('101', ('ank', 'NN')): [54, 1], ('101', ('bank', 'NN')): [55, 1],
                                   ('101', ('e', 'NN')): [56, 1], ('101', ('de', 'NN')): [57, 1],
                                   ('101', ('ade', 'NN')): [58, 1], ('101', ('rade', 'NN')): [59, 1],
                                   ('101', ('ns', 'NNS')): [60, 1], ('101', ('ons', 'NNS')): [61, 1],
                                   ('101', ('ions', 'NNS')): [62, 1], ('101', ('d', 'CC')): [63, 1],
                                   ('101', ('nd', 'CC')): [64, 1], ('101', ('and', 'CC')): [65, 1],
                                   ('101', ('r', 'JJ')): [66, 1], ('101', ('er', 'JJ')): [67, 1],
                                   ('101', ('her', 'JJ')): [68, 1], ('101', ('ther', 'JJ')): [69, 1],
                                   ('101', ('t', 'NN')): [70, 1], ('101', ('nt', 'NN')): [71, 1],
                                   ('101', ('ent', 'NN')): [72, 1], ('101', ('ment', 'NN')): [73, 1],
                                   ('101', ('es', 'NNS')): [74, 1], ('101', ('ies', 'NNS')): [75, 1],
                                   ('101', ('cies', 'NNS')): [76, 1], ('101', ('t', 'WDT')): [77, 1],
                                   ('101', ('at', 'WDT')): [78, 1], ('101', ('hat', 'WDT')): [79, 1],
                                   ('101', ('that', 'WDT')): [80, 1], ('101', ('e', 'VBP')): [81, 1],
                                   ('101', ('ve', 'VBP')): [82, 1], ('101', ('ave', 'VBP')): [83, 1],
                                   ('101', ('have', 'VBP')): [84, 1], ('101', ('a', 'DT')): [85, 1],
                                   ('101', ('d', 'NN')): [86, 1], ('101', ('nd', 'NN')): [87, 1],
                                   ('101', ('and', 'NN')): [88, 1], ('101', ('hand', 'NN')): [89, 1],
                                   ('101', ('n', 'IN')): [90, 1], ('101', ('in', 'IN')): [91, 1],
                                   ('101', ('ting', 'VBG')): [92, 1], ('101', ('y', 'NN')): [93, 1],
                                   ('101', ('ey', 'NN')): [94, 1], ('101', ('ney', 'NN')): [95, 1],
                                   ('101', ('oney', 'NN')): [96, 1], ('101', ('g', 'NN')): [97, 1],
                                   ('101', ('ng', 'NN')): [98, 1], ('101', ('ing', 'NN')): [99, 1],
                                   ('101', ('ring', 'NN')): [100, 1], ('101', ('.', '.')): [101, 1]}
        self.assertEqual(feature.feature_vector, expected_feature_vector)

    def test_feature_102(self):
        feature = Feature("trialDataFiles/trialOneSentence.wtag")
        feature.feature_102()
        expected_feature_vector = {('102', ('t', 'DT')): [0, 3], ('102', ('th', 'DT')): [1, 3],
                                   ('102', ('the', 'DT')): [2, 3], ('102', ('t', 'NNP')): [3, 1],
                                   ('102', ('tr', 'NNP')): [4, 1], ('102', ('tre', 'NNP')): [5, 1],
                                   ('102', ('trea', 'NNP')): [6, 1], ('102', ('i', 'VBZ')): [7, 1],
                                   ('102', ('is', 'VBZ')): [8, 1], ('102', ('s', 'RB')): [9, 1],
                                   ('102', ('st', 'RB')): [10, 1], ('102', ('sti', 'RB')): [11, 1],
                                   ('102', ('stil', 'RB')): [12, 1], ('102', ('w', 'VBG')): [13, 1],
                                   ('102', ('wo', 'VBG')): [14, 1], ('102', ('wor', 'VBG')): [15, 1],
                                   ('102', ('work', 'VBG')): [16, 1], ('102', ('o', 'RP')): [17, 1],
                                   ('102', ('ou', 'RP')): [18, 1], ('102', ('out', 'RP')): [19, 1],
                                   ('102', ('d', 'NNS')): [20, 1], ('102', ('de', 'NNS')): [21, 1],
                                   ('102', ('det', 'NNS')): [22, 1], ('102', ('deta', 'NNS')): [23, 1],
                                   ('102', ('w', 'IN')): [24, 1], ('102', ('wi', 'IN')): [25, 1],
                                   ('102', ('wit', 'IN')): [26, 1], ('102', ('with', 'IN')): [27, 1],
                                   ('102', ('b', 'NN')): [28, 1], ('102', ('ba', 'NN')): [29, 1],
                                   ('102', ('ban', 'NN')): [30, 1], ('102', ('bank', 'NN')): [31, 1],
                                   ('102', ('t', 'NN')): [32, 1], ('102', ('tr', 'NN')): [33, 1],
                                   ('102', ('tra', 'NN')): [34, 1], ('102', ('trad', 'NN')): [35, 1],
                                   ('102', ('a', 'NNS')): [36, 2], ('102', ('as', 'NNS')): [37, 1],
                                   ('102', ('ass', 'NNS')): [38, 1], ('102', ('asso', 'NNS')): [39, 1],
                                   ('102', ('a', 'CC')): [40, 1], ('102', ('an', 'CC')): [41, 1],
                                   ('102', ('and', 'CC')): [42, 1], ('102', ('o', 'JJ')): [43, 1],
                                   ('102', ('ot', 'JJ')): [44, 1], ('102', ('oth', 'JJ')): [45, 1],
                                   ('102', ('othe', 'JJ')): [46, 1], ('102', ('g', 'NN')): [47, 1],
                                   ('102', ('go', 'NN')): [48, 1], ('102', ('gov', 'NN')): [49, 1],
                                   ('102', ('gove', 'NN')): [50, 1], ('102', ('ag', 'NNS')): [51, 1],
                                   ('102', ('age', 'NNS')): [52, 1], ('102', ('agen', 'NNS')): [53, 1],
                                   ('102', ('t', 'WDT')): [54, 1], ('102', ('th', 'WDT')): [55, 1],
                                   ('102', ('tha', 'WDT')): [56, 1], ('102', ('that', 'WDT')): [57, 1],
                                   ('102', ('h', 'VBP')): [58, 1], ('102', ('ha', 'VBP')): [59, 1],
                                   ('102', ('hav', 'VBP')): [60, 1], ('102', ('have', 'VBP')): [61, 1],
                                   ('102', ('a', 'DT')): [62, 1], ('102', ('h', 'NN')): [63, 1],
                                   ('102', ('ha', 'NN')): [64, 1], ('102', ('han', 'NN')): [65, 1],
                                   ('102', ('hand', 'NN')): [66, 1], ('102', ('i', 'IN')): [67, 1],
                                   ('102', ('in', 'IN')): [68, 1], ('102', ('f', 'VBG')): [69, 1],
                                   ('102', ('fi', 'VBG')): [70, 1], ('102', ('fig', 'VBG')): [71, 1],
                                   ('102', ('figh', 'VBG')): [72, 1], ('102', ('m', 'NN')): [73, 1],
                                   ('102', ('mo', 'NN')): [74, 1], ('102', ('mon', 'NN')): [75, 1],
                                   ('102', ('mone', 'NN')): [76, 1], ('102', ('l', 'NN')): [77, 1],
                                   ('102', ('la', 'NN')): [78, 1], ('102', ('lau', 'NN')): [79, 1],
                                   ('102', ('laun', 'NN')): [80, 1], ('102', ('.', '.')): [81, 1]}
        self.assertEqual(feature.feature_vector, expected_feature_vector)

        feature = Feature("trialDataFiles/trialOneSentence.wtag")
        feature.feature_101()
        feature.feature_102()
        expected_feature_vector = {('101', ('e', 'DT')): [0, 3], ('101', ('he', 'DT')): [1, 3],
                                   ('101', ('the', 'DT')): [2, 3], ('101', ('y', 'NNP')): [3, 1],
                                   ('101', ('ry', 'NNP')): [4, 1], ('101', ('ury', 'NNP')): [5, 1],
                                   ('101', ('sury', 'NNP')): [6, 1], ('101', ('s', 'VBZ')): [7, 1],
                                   ('101', ('is', 'VBZ')): [8, 1], ('101', ('l', 'RB')): [9, 1],
                                   ('101', ('ll', 'RB')): [10, 1], ('101', ('ill', 'RB')): [11, 1],
                                   ('101', ('till', 'RB')): [12, 1], ('101', ('g', 'VBG')): [13, 2],
                                   ('101', ('ng', 'VBG')): [14, 2], ('101', ('ing', 'VBG')): [15, 2],
                                   ('101', ('king', 'VBG')): [16, 1], ('101', ('t', 'RP')): [17, 1],
                                   ('101', ('ut', 'RP')): [18, 1], ('101', ('out', 'RP')): [19, 1],
                                   ('101', ('s', 'NNS')): [20, 3], ('101', ('ls', 'NNS')): [21, 1],
                                   ('101', ('ils', 'NNS')): [22, 1], ('101', ('ails', 'NNS')): [23, 1],
                                   ('101', ('h', 'IN')): [24, 1], ('101', ('th', 'IN')): [25, 1],
                                   ('101', ('ith', 'IN')): [26, 1], ('101', ('with', 'IN')): [27, 1],
                                   ('101', ('k', 'NN')): [28, 1], ('101', ('nk', 'NN')): [29, 1],
                                   ('101', ('ank', 'NN')): [30, 1], ('101', ('bank', 'NN')): [31, 1],
                                   ('101', ('e', 'NN')): [32, 1], ('101', ('de', 'NN')): [33, 1],
                                   ('101', ('ade', 'NN')): [34, 1], ('101', ('rade', 'NN')): [35, 1],
                                   ('101', ('ns', 'NNS')): [36, 1], ('101', ('ons', 'NNS')): [37, 1],
                                   ('101', ('ions', 'NNS')): [38, 1], ('101', ('d', 'CC')): [39, 1],
                                   ('101', ('nd', 'CC')): [40, 1], ('101', ('and', 'CC')): [41, 1],
                                   ('101', ('r', 'JJ')): [42, 1], ('101', ('er', 'JJ')): [43, 1],
                                   ('101', ('her', 'JJ')): [44, 1], ('101', ('ther', 'JJ')): [45, 1],
                                   ('101', ('t', 'NN')): [46, 1], ('101', ('nt', 'NN')): [47, 1],
                                   ('101', ('ent', 'NN')): [48, 1], ('101', ('ment', 'NN')): [49, 1],
                                   ('101', ('es', 'NNS')): [50, 1], ('101', ('ies', 'NNS')): [51, 1],
                                   ('101', ('cies', 'NNS')): [52, 1], ('101', ('t', 'WDT')): [53, 1],
                                   ('101', ('at', 'WDT')): [54, 1], ('101', ('hat', 'WDT')): [55, 1],
                                   ('101', ('that', 'WDT')): [56, 1], ('101', ('e', 'VBP')): [57, 1],
                                   ('101', ('ve', 'VBP')): [58, 1], ('101', ('ave', 'VBP')): [59, 1],
                                   ('101', ('have', 'VBP')): [60, 1], ('101', ('a', 'DT')): [61, 1],
                                   ('101', ('d', 'NN')): [62, 1], ('101', ('nd', 'NN')): [63, 1],
                                   ('101', ('and', 'NN')): [64, 1], ('101', ('hand', 'NN')): [65, 1],
                                   ('101', ('n', 'IN')): [66, 1], ('101', ('in', 'IN')): [67, 1],
                                   ('101', ('ting', 'VBG')): [68, 1], ('101', ('y', 'NN')): [69, 1],
                                   ('101', ('ey', 'NN')): [70, 1], ('101', ('ney', 'NN')): [71, 1],
                                   ('101', ('oney', 'NN')): [72, 1], ('101', ('g', 'NN')): [73, 1],
                                   ('101', ('ng', 'NN')): [74, 1], ('101', ('ing', 'NN')): [75, 1],
                                   ('101', ('ring', 'NN')): [76, 1], ('101', ('.', '.')): [77, 1],
                                   ('102', ('t', 'DT')): [78, 3], ('102', ('th', 'DT')): [79, 3],
                                   ('102', ('the', 'DT')): [80, 3], ('102', ('t', 'NNP')): [81, 1],
                                   ('102', ('tr', 'NNP')): [82, 1], ('102', ('tre', 'NNP')): [83, 1],
                                   ('102', ('trea', 'NNP')): [84, 1], ('102', ('i', 'VBZ')): [85, 1],
                                   ('102', ('is', 'VBZ')): [86, 1], ('102', ('s', 'RB')): [87, 1],
                                   ('102', ('st', 'RB')): [88, 1], ('102', ('sti', 'RB')): [89, 1],
                                   ('102', ('stil', 'RB')): [90, 1], ('102', ('w', 'VBG')): [91, 1],
                                   ('102', ('wo', 'VBG')): [92, 1], ('102', ('wor', 'VBG')): [93, 1],
                                   ('102', ('work', 'VBG')): [94, 1], ('102', ('o', 'RP')): [95, 1],
                                   ('102', ('ou', 'RP')): [96, 1], ('102', ('out', 'RP')): [97, 1],
                                   ('102', ('d', 'NNS')): [98, 1], ('102', ('de', 'NNS')): [99, 1],
                                   ('102', ('det', 'NNS')): [100, 1], ('102', ('deta', 'NNS')): [101, 1],
                                   ('102', ('w', 'IN')): [102, 1], ('102', ('wi', 'IN')): [103, 1],
                                   ('102', ('wit', 'IN')): [104, 1], ('102', ('with', 'IN')): [105, 1],
                                   ('102', ('b', 'NN')): [106, 1], ('102', ('ba', 'NN')): [107, 1],
                                   ('102', ('ban', 'NN')): [108, 1], ('102', ('bank', 'NN')): [109, 1],
                                   ('102', ('t', 'NN')): [110, 1], ('102', ('tr', 'NN')): [111, 1],
                                   ('102', ('tra', 'NN')): [112, 1], ('102', ('trad', 'NN')): [113, 1],
                                   ('102', ('a', 'NNS')): [114, 2], ('102', ('as', 'NNS')): [115, 1],
                                   ('102', ('ass', 'NNS')): [116, 1], ('102', ('asso', 'NNS')): [117, 1],
                                   ('102', ('a', 'CC')): [118, 1], ('102', ('an', 'CC')): [119, 1],
                                   ('102', ('and', 'CC')): [120, 1], ('102', ('o', 'JJ')): [121, 1],
                                   ('102', ('ot', 'JJ')): [122, 1], ('102', ('oth', 'JJ')): [123, 1],
                                   ('102', ('othe', 'JJ')): [124, 1], ('102', ('g', 'NN')): [125, 1],
                                   ('102', ('go', 'NN')): [126, 1], ('102', ('gov', 'NN')): [127, 1],
                                   ('102', ('gove', 'NN')): [128, 1], ('102', ('ag', 'NNS')): [129, 1],
                                   ('102', ('age', 'NNS')): [130, 1], ('102', ('agen', 'NNS')): [131, 1],
                                   ('102', ('t', 'WDT')): [132, 1], ('102', ('th', 'WDT')): [133, 1],
                                   ('102', ('tha', 'WDT')): [134, 1], ('102', ('that', 'WDT')): [135, 1],
                                   ('102', ('h', 'VBP')): [136, 1], ('102', ('ha', 'VBP')): [137, 1],
                                   ('102', ('hav', 'VBP')): [138, 1], ('102', ('have', 'VBP')): [139, 1],
                                   ('102', ('a', 'DT')): [140, 1], ('102', ('h', 'NN')): [141, 1],
                                   ('102', ('ha', 'NN')): [142, 1], ('102', ('han', 'NN')): [143, 1],
                                   ('102', ('hand', 'NN')): [144, 1], ('102', ('i', 'IN')): [145, 1],
                                   ('102', ('in', 'IN')): [146, 1], ('102', ('f', 'VBG')): [147, 1],
                                   ('102', ('fi', 'VBG')): [148, 1], ('102', ('fig', 'VBG')): [149, 1],
                                   ('102', ('figh', 'VBG')): [150, 1], ('102', ('m', 'NN')): [151, 1],
                                   ('102', ('mo', 'NN')): [152, 1], ('102', ('mon', 'NN')): [153, 1],
                                   ('102', ('mone', 'NN')): [154, 1], ('102', ('l', 'NN')): [155, 1],
                                   ('102', ('la', 'NN')): [156, 1], ('102', ('lau', 'NN')): [157, 1],
                                   ('102', ('laun', 'NN')): [158, 1], ('102', ('.', '.')): [159, 1]}
        self.assertEqual(feature.feature_vector, expected_feature_vector)

    def test_feature_103(self):
        feature = Feature("trialDataFiles/trialOneSentence.wtag")
        feature.feature_103()
        expected_feature_vector = {('103', ('*', '*', 'DT')): [0, 1], ('103', ('*', 'DT', 'NNP')): [1, 1],
                                   ('103', ('DT', 'NNP', 'VBZ')): [2, 1], ('103', ('NNP', 'VBZ', 'RB')): [3, 1],
                                   ('103', ('VBZ', 'RB', 'VBG')): [4, 1], ('103', ('RB', 'VBG', 'RP')): [5, 1],
                                   ('103', ('VBG', 'RP', 'DT')): [6, 1], ('103', ('RP', 'DT', 'NNS')): [7, 1],
                                   ('103', ('DT', 'NNS', 'IN')): [8, 1], ('103', ('NNS', 'IN', 'NN')): [9, 1],
                                   ('103', ('IN', 'NN', 'NN')): [10, 1], ('103', ('NN', 'NN', 'NNS')): [11, 1],
                                   ('103', ('NN', 'NNS', 'CC')): [12, 1], ('103', ('NNS', 'CC', 'DT')): [13, 1],
                                   ('103', ('CC', 'DT', 'JJ')): [14, 1], ('103', ('DT', 'JJ', 'NN')): [15, 1],
                                   ('103', ('JJ', 'NN', 'NNS')): [16, 1], ('103', ('NN', 'NNS', 'WDT')): [17, 1],
                                   ('103', ('NNS', 'WDT', 'VBP')): [18, 1], ('103', ('WDT', 'VBP', 'DT')): [19, 1],
                                   ('103', ('VBP', 'DT', 'NN')): [20, 1], ('103', ('DT', 'NN', 'IN')): [21, 1],
                                   ('103', ('NN', 'IN', 'VBG')): [22, 1], ('103', ('IN', 'VBG', 'NN')): [23, 1],
                                   ('103', ('VBG', 'NN', 'NN')): [24, 1], ('103', ('NN', 'NN', '.')): [25, 1]}
        self.assertEqual(feature.feature_vector, expected_feature_vector)

        feature = Feature("trialDataFiles/trialTwoSentences.wtag")
        feature.feature_103()
        expected_feature_vector = {('103', ('*', '*', 'DT')): [0, 1], ('103', ('*', 'DT', 'NNP')): [1, 1],
                                   ('103', ('DT', 'NNP', 'VBZ')): [2, 2], ('103', ('NNP', 'VBZ', 'RB')): [3, 1],
                                   ('103', ('VBZ', 'RB', 'VBG')): [4, 1], ('103', ('RB', 'VBG', 'RP')): [5, 1],
                                   ('103', ('VBG', 'RP', 'DT')): [6, 1], ('103', ('RP', 'DT', 'NNS')): [7, 1],
                                   ('103', ('DT', 'NNS', 'IN')): [8, 1], ('103', ('NNS', 'IN', 'NN')): [9, 1],
                                   ('103', ('IN', 'NN', 'NN')): [10, 1], ('103', ('NN', 'NN', 'NNS')): [11, 1],
                                   ('103', ('NN', 'NNS', 'CC')): [12, 1], ('103', ('NNS', 'CC', 'DT')): [13, 1],
                                   ('103', ('CC', 'DT', 'JJ')): [14, 1], ('103', ('DT', 'JJ', 'NN')): [15, 1],
                                   ('103', ('JJ', 'NN', 'NNS')): [16, 2], ('103', ('NN', 'NNS', 'WDT')): [17, 1],
                                   ('103', ('NNS', 'WDT', 'VBP')): [18, 1], ('103', ('WDT', 'VBP', 'DT')): [19, 1],
                                   ('103', ('VBP', 'DT', 'NN')): [20, 1], ('103', ('DT', 'NN', 'IN')): [21, 1],
                                   ('103', ('NN', 'IN', 'VBG')): [22, 1], ('103', ('IN', 'VBG', 'NN')): [23, 1],
                                   ('103', ('VBG', 'NN', 'NN')): [24, 1], ('103', ('NN', 'NN', '.')): [25, 1],
                                   ('103', ('*', '*', 'IN')): [26, 1], ('103', ('*', 'IN', 'DT')): [27, 1],
                                   ('103', ('IN', 'DT', 'NNS')): [28, 1], ('103', ('DT', 'NNS', 'DT')): [29, 1],
                                   ('103', ('NNS', 'DT', 'NNP')): [30, 1], ('103', ('NNP', 'VBZ', 'VBG')): [31, 1],
                                   ('103', ('VBZ', 'VBG', 'VBP')): [32, 1], ('103', ('VBG', 'VBP', 'NNS')): [33, 1],
                                   ('103', ('VBP', 'NNS', 'IN')): [34, 1], ('103', ('NNS', 'IN', 'NNS')): [35, 1],
                                   ('103', ('IN', 'NNS', 'VB')): [36, 1], ('103', ('NNS', 'VB', 'NNS')): [37, 1],
                                   ('103', ('VB', 'NNS', 'VBG')): [38, 1], ('103', ('NNS', 'VBG', 'DT')): [39, 1],
                                   ('103', ('VBG', 'DT', 'NNS')): [40, 1], ('103', ('DT', 'NNS', 'CC')): [41, 1],
                                   ('103', ('NNS', 'CC', 'NNS')): [42, 1], ('103', ('CC', 'NNS', 'IN')): [43, 1],
                                   ('103', ('NNS', 'IN', 'JJ')): [44, 1], ('103', ('IN', 'JJ', 'NN')): [45, 1],
                                   ('103', ('NN', 'NNS', '.')): [46, 1]}
        self.assertEqual(feature.feature_vector, expected_feature_vector)

    def test_feature_104(self):
        feature = Feature("trialDataFiles/trialOneSentence.wtag")
        feature.feature_104()
        expected_feature_vector = {('104', ('*', 'DT')): [0, 1], ('104', ('DT', 'NNP')): [1, 1],
                                   ('104', ('NNP', 'VBZ')): [2, 1], ('104', ('VBZ', 'RB')): [3, 1],
                                   ('104', ('RB', 'VBG')): [4, 1], ('104', ('VBG', 'RP')): [5, 1],
                                   ('104', ('RP', 'DT')): [6, 1], ('104', ('DT', 'NNS')): [7, 1],
                                   ('104', ('NNS', 'IN')): [8, 1], ('104', ('IN', 'NN')): [9, 1],
                                   ('104', ('NN', 'NN')): [10, 2], ('104', ('NN', 'NNS')): [11, 2],
                                   ('104', ('NNS', 'CC')): [12, 1], ('104', ('CC', 'DT')): [13, 1],
                                   ('104', ('DT', 'JJ')): [14, 1], ('104', ('JJ', 'NN')): [15, 1],
                                   ('104', ('NNS', 'WDT')): [16, 1], ('104', ('WDT', 'VBP')): [17, 1],
                                   ('104', ('VBP', 'DT')): [18, 1], ('104', ('DT', 'NN')): [19, 1],
                                   ('104', ('NN', 'IN')): [20, 1], ('104', ('IN', 'VBG')): [21, 1],
                                   ('104', ('VBG', 'NN')): [22, 1], ('104', ('NN', '.')): [23, 1]}
        self.assertEqual(feature.feature_vector, expected_feature_vector)

        feature = Feature("trialDataFiles/trialOneSentence.wtag")
        feature.feature_103()
        feature.feature_104()
        expected_feature_vector = {('103', ('*', '*', 'DT')): [0, 1], ('103', ('*', 'DT', 'NNP')): [1, 1],
                                   ('103', ('DT', 'NNP', 'VBZ')): [2, 1], ('103', ('NNP', 'VBZ', 'RB')): [3, 1],
                                   ('103', ('VBZ', 'RB', 'VBG')): [4, 1], ('103', ('RB', 'VBG', 'RP')): [5, 1],
                                   ('103', ('VBG', 'RP', 'DT')): [6, 1], ('103', ('RP', 'DT', 'NNS')): [7, 1],
                                   ('103', ('DT', 'NNS', 'IN')): [8, 1], ('103', ('NNS', 'IN', 'NN')): [9, 1],
                                   ('103', ('IN', 'NN', 'NN')): [10, 1], ('103', ('NN', 'NN', 'NNS')): [11, 1],
                                   ('103', ('NN', 'NNS', 'CC')): [12, 1], ('103', ('NNS', 'CC', 'DT')): [13, 1],
                                   ('103', ('CC', 'DT', 'JJ')): [14, 1], ('103', ('DT', 'JJ', 'NN')): [15, 1],
                                   ('103', ('JJ', 'NN', 'NNS')): [16, 1], ('103', ('NN', 'NNS', 'WDT')): [17, 1],
                                   ('103', ('NNS', 'WDT', 'VBP')): [18, 1], ('103', ('WDT', 'VBP', 'DT')): [19, 1],
                                   ('103', ('VBP', 'DT', 'NN')): [20, 1], ('103', ('DT', 'NN', 'IN')): [21, 1],
                                   ('103', ('NN', 'IN', 'VBG')): [22, 1], ('103', ('IN', 'VBG', 'NN')): [23, 1],
                                   ('103', ('VBG', 'NN', 'NN')): [24, 1], ('103', ('NN', 'NN', '.')): [25, 1],
                                   ('104', ('*', 'DT')): [26, 1], ('104', ('DT', 'NNP')): [27, 1],
                                   ('104', ('NNP', 'VBZ')): [28, 1], ('104', ('VBZ', 'RB')): [29, 1],
                                   ('104', ('RB', 'VBG')): [30, 1], ('104', ('VBG', 'RP')): [31, 1],
                                   ('104', ('RP', 'DT')): [32, 1], ('104', ('DT', 'NNS')): [33, 1],
                                   ('104', ('NNS', 'IN')): [34, 1], ('104', ('IN', 'NN')): [35, 1],
                                   ('104', ('NN', 'NN')): [36, 2], ('104', ('NN', 'NNS')): [37, 2],
                                   ('104', ('NNS', 'CC')): [38, 1], ('104', ('CC', 'DT')): [39, 1],
                                   ('104', ('DT', 'JJ')): [40, 1], ('104', ('JJ', 'NN')): [41, 1],
                                   ('104', ('NNS', 'WDT')): [42, 1], ('104', ('WDT', 'VBP')): [43, 1],
                                   ('104', ('VBP', 'DT')): [44, 1], ('104', ('DT', 'NN')): [45, 1],
                                   ('104', ('NN', 'IN')): [46, 1], ('104', ('IN', 'VBG')): [47, 1],
                                   ('104', ('VBG', 'NN')): [48, 1], ('104', ('NN', '.')): [49, 1]}
        self.assertEqual(feature.feature_vector, expected_feature_vector)

    def test_feature_105(self):
        feature = Feature("trialDataFiles/trialOneSentence.wtag")
        feature.feature_105()
        expected_feature_vector = {('105', 'DT'): [0, 4], ('105', 'NNP'): [1, 1], ('105', 'VBZ'): [2, 1],
                                   ('105', 'RB'): [3, 1], ('105', 'VBG'): [4, 2], ('105', 'RP'): [5, 1],
                                   ('105', 'NNS'): [6, 3], ('105', 'IN'): [7, 2], ('105', 'NN'): [8, 6],
                                   ('105', 'CC'): [9, 1], ('105', 'JJ'): [10, 1], ('105', 'WDT'): [11, 1],
                                   ('105', 'VBP'): [12, 1], ('105', '.'): [13, 1]}
        self.assertEqual(feature.feature_vector, expected_feature_vector)

        feature = Feature("trialDataFiles/trialTwoSentences.wtag")
        feature.feature_105()
        expected_feature_vector = {('105', 'DT'): [0, 7], ('105', 'NNP'): [1, 2], ('105', 'VBZ'): [2, 2],
                                   ('105', 'RB'): [3, 1], ('105', 'VBG'): [4, 4], ('105', 'RP'): [5, 1],
                                   ('105', 'NNS'): [6, 10], ('105', 'IN'): [7, 5], ('105', 'NN'): [8, 7],
                                   ('105', 'CC'): [9, 2], ('105', 'JJ'): [10, 2], ('105', 'WDT'): [11, 1],
                                   ('105', 'VBP'): [12, 2], ('105', '.'): [13, 2], ('105', 'VB'): [14, 1]}
        self.assertEqual(feature.feature_vector, expected_feature_vector)

    def test_all_features(self):
        feature = Feature("trialDataFiles/trialOneSentence.wtag")
        feature.feature_100()
        feature.feature_101()
        feature.feature_102()
        feature.feature_103()
        feature.feature_104()
        feature.feature_105()
        expected_feature_vector = {('100', ('the', 'DT')): [0, 3], ('100', ('treasury', 'NNP')): [1, 1],
                                   ('100', ('is', 'VBZ')): [2, 1], ('100', ('still', 'RB')): [3, 1],
                                   ('100', ('working', 'VBG')): [4, 1], ('100', ('out', 'RP')): [5, 1],
                                   ('100', ('details', 'NNS')): [6, 1], ('100', ('with', 'IN')): [7, 1],
                                   ('100', ('bank', 'NN')): [8, 1], ('100', ('trade', 'NN')): [9, 1],
                                   ('100', ('associations', 'NNS')): [10, 1], ('100', ('and', 'CC')): [11, 1],
                                   ('100', ('other', 'JJ')): [12, 1], ('100', ('government', 'NN')): [13, 1],
                                   ('100', ('agencies', 'NNS')): [14, 1], ('100', ('that', 'WDT')): [15, 1],
                                   ('100', ('have', 'VBP')): [16, 1], ('100', ('a', 'DT')): [17, 1],
                                   ('100', ('hand', 'NN')): [18, 1], ('100', ('in', 'IN')): [19, 1],
                                   ('100', ('fighting', 'VBG')): [20, 1], ('100', ('money', 'NN')): [21, 1],
                                   ('100', ('laundering', 'NN')): [22, 1], ('100', ('.', '.')): [23, 1],
                                   ('101', ('e', 'DT')): [24, 3], ('101', ('he', 'DT')): [25, 3],
                                   ('101', ('the', 'DT')): [26, 3], ('101', ('y', 'NNP')): [27, 1],
                                   ('101', ('ry', 'NNP')): [28, 1], ('101', ('ury', 'NNP')): [29, 1],
                                   ('101', ('sury', 'NNP')): [30, 1], ('101', ('s', 'VBZ')): [31, 1],
                                   ('101', ('is', 'VBZ')): [32, 1], ('101', ('l', 'RB')): [33, 1],
                                   ('101', ('ll', 'RB')): [34, 1], ('101', ('ill', 'RB')): [35, 1],
                                   ('101', ('till', 'RB')): [36, 1], ('101', ('g', 'VBG')): [37, 2],
                                   ('101', ('ng', 'VBG')): [38, 2], ('101', ('ing', 'VBG')): [39, 2],
                                   ('101', ('king', 'VBG')): [40, 1], ('101', ('t', 'RP')): [41, 1],
                                   ('101', ('ut', 'RP')): [42, 1], ('101', ('out', 'RP')): [43, 1],
                                   ('101', ('s', 'NNS')): [44, 3], ('101', ('ls', 'NNS')): [45, 1],
                                   ('101', ('ils', 'NNS')): [46, 1], ('101', ('ails', 'NNS')): [47, 1],
                                   ('101', ('h', 'IN')): [48, 1], ('101', ('th', 'IN')): [49, 1],
                                   ('101', ('ith', 'IN')): [50, 1], ('101', ('with', 'IN')): [51, 1],
                                   ('101', ('k', 'NN')): [52, 1], ('101', ('nk', 'NN')): [53, 1],
                                   ('101', ('ank', 'NN')): [54, 1], ('101', ('bank', 'NN')): [55, 1],
                                   ('101', ('e', 'NN')): [56, 1], ('101', ('de', 'NN')): [57, 1],
                                   ('101', ('ade', 'NN')): [58, 1], ('101', ('rade', 'NN')): [59, 1],
                                   ('101', ('ns', 'NNS')): [60, 1], ('101', ('ons', 'NNS')): [61, 1],
                                   ('101', ('ions', 'NNS')): [62, 1], ('101', ('d', 'CC')): [63, 1],
                                   ('101', ('nd', 'CC')): [64, 1], ('101', ('and', 'CC')): [65, 1],
                                   ('101', ('r', 'JJ')): [66, 1], ('101', ('er', 'JJ')): [67, 1],
                                   ('101', ('her', 'JJ')): [68, 1], ('101', ('ther', 'JJ')): [69, 1],
                                   ('101', ('t', 'NN')): [70, 1], ('101', ('nt', 'NN')): [71, 1],
                                   ('101', ('ent', 'NN')): [72, 1], ('101', ('ment', 'NN')): [73, 1],
                                   ('101', ('es', 'NNS')): [74, 1], ('101', ('ies', 'NNS')): [75, 1],
                                   ('101', ('cies', 'NNS')): [76, 1], ('101', ('t', 'WDT')): [77, 1],
                                   ('101', ('at', 'WDT')): [78, 1], ('101', ('hat', 'WDT')): [79, 1],
                                   ('101', ('that', 'WDT')): [80, 1], ('101', ('e', 'VBP')): [81, 1],
                                   ('101', ('ve', 'VBP')): [82, 1], ('101', ('ave', 'VBP')): [83, 1],
                                   ('101', ('have', 'VBP')): [84, 1], ('101', ('a', 'DT')): [85, 1],
                                   ('101', ('d', 'NN')): [86, 1], ('101', ('nd', 'NN')): [87, 1],
                                   ('101', ('and', 'NN')): [88, 1], ('101', ('hand', 'NN')): [89, 1],
                                   ('101', ('n', 'IN')): [90, 1], ('101', ('in', 'IN')): [91, 1],
                                   ('101', ('ting', 'VBG')): [92, 1], ('101', ('y', 'NN')): [93, 1],
                                   ('101', ('ey', 'NN')): [94, 1], ('101', ('ney', 'NN')): [95, 1],
                                   ('101', ('oney', 'NN')): [96, 1], ('101', ('g', 'NN')): [97, 1],
                                   ('101', ('ng', 'NN')): [98, 1], ('101', ('ing', 'NN')): [99, 1],
                                   ('101', ('ring', 'NN')): [100, 1], ('101', ('.', '.')): [101, 1],
                                   ('102', ('t', 'DT')): [102, 3], ('102', ('th', 'DT')): [103, 3],
                                   ('102', ('the', 'DT')): [104, 3], ('102', ('t', 'NNP')): [105, 1],
                                   ('102', ('tr', 'NNP')): [106, 1], ('102', ('tre', 'NNP')): [107, 1],
                                   ('102', ('trea', 'NNP')): [108, 1], ('102', ('i', 'VBZ')): [109, 1],
                                   ('102', ('is', 'VBZ')): [110, 1], ('102', ('s', 'RB')): [111, 1],
                                   ('102', ('st', 'RB')): [112, 1], ('102', ('sti', 'RB')): [113, 1],
                                   ('102', ('stil', 'RB')): [114, 1], ('102', ('w', 'VBG')): [115, 1],
                                   ('102', ('wo', 'VBG')): [116, 1], ('102', ('wor', 'VBG')): [117, 1],
                                   ('102', ('work', 'VBG')): [118, 1], ('102', ('o', 'RP')): [119, 1],
                                   ('102', ('ou', 'RP')): [120, 1], ('102', ('out', 'RP')): [121, 1],
                                   ('102', ('d', 'NNS')): [122, 1], ('102', ('de', 'NNS')): [123, 1],
                                   ('102', ('det', 'NNS')): [124, 1], ('102', ('deta', 'NNS')): [125, 1],
                                   ('102', ('w', 'IN')): [126, 1], ('102', ('wi', 'IN')): [127, 1],
                                   ('102', ('wit', 'IN')): [128, 1], ('102', ('with', 'IN')): [129, 1],
                                   ('102', ('b', 'NN')): [130, 1], ('102', ('ba', 'NN')): [131, 1],
                                   ('102', ('ban', 'NN')): [132, 1], ('102', ('bank', 'NN')): [133, 1],
                                   ('102', ('t', 'NN')): [134, 1], ('102', ('tr', 'NN')): [135, 1],
                                   ('102', ('tra', 'NN')): [136, 1], ('102', ('trad', 'NN')): [137, 1],
                                   ('102', ('a', 'NNS')): [138, 2], ('102', ('as', 'NNS')): [139, 1],
                                   ('102', ('ass', 'NNS')): [140, 1], ('102', ('asso', 'NNS')): [141, 1],
                                   ('102', ('a', 'CC')): [142, 1], ('102', ('an', 'CC')): [143, 1],
                                   ('102', ('and', 'CC')): [144, 1], ('102', ('o', 'JJ')): [145, 1],
                                   ('102', ('ot', 'JJ')): [146, 1], ('102', ('oth', 'JJ')): [147, 1],
                                   ('102', ('othe', 'JJ')): [148, 1], ('102', ('g', 'NN')): [149, 1],
                                   ('102', ('go', 'NN')): [150, 1], ('102', ('gov', 'NN')): [151, 1],
                                   ('102', ('gove', 'NN')): [152, 1], ('102', ('ag', 'NNS')): [153, 1],
                                   ('102', ('age', 'NNS')): [154, 1], ('102', ('agen', 'NNS')): [155, 1],
                                   ('102', ('t', 'WDT')): [156, 1], ('102', ('th', 'WDT')): [157, 1],
                                   ('102', ('tha', 'WDT')): [158, 1], ('102', ('that', 'WDT')): [159, 1],
                                   ('102', ('h', 'VBP')): [160, 1], ('102', ('ha', 'VBP')): [161, 1],
                                   ('102', ('hav', 'VBP')): [162, 1], ('102', ('have', 'VBP')): [163, 1],
                                   ('102', ('a', 'DT')): [164, 1], ('102', ('h', 'NN')): [165, 1],
                                   ('102', ('ha', 'NN')): [166, 1], ('102', ('han', 'NN')): [167, 1],
                                   ('102', ('hand', 'NN')): [168, 1], ('102', ('i', 'IN')): [169, 1],
                                   ('102', ('in', 'IN')): [170, 1], ('102', ('f', 'VBG')): [171, 1],
                                   ('102', ('fi', 'VBG')): [172, 1], ('102', ('fig', 'VBG')): [173, 1],
                                   ('102', ('figh', 'VBG')): [174, 1], ('102', ('m', 'NN')): [175, 1],
                                   ('102', ('mo', 'NN')): [176, 1], ('102', ('mon', 'NN')): [177, 1],
                                   ('102', ('mone', 'NN')): [178, 1], ('102', ('l', 'NN')): [179, 1],
                                   ('102', ('la', 'NN')): [180, 1], ('102', ('lau', 'NN')): [181, 1],
                                   ('102', ('laun', 'NN')): [182, 1], ('102', ('.', '.')): [183, 1],
                                   ('103', ('*', '*', 'DT')): [184, 1], ('103', ('*', 'DT', 'NNP')): [185, 1],
                                   ('103', ('DT', 'NNP', 'VBZ')): [186, 1], ('103', ('NNP', 'VBZ', 'RB')): [187, 1],
                                   ('103', ('VBZ', 'RB', 'VBG')): [188, 1], ('103', ('RB', 'VBG', 'RP')): [189, 1],
                                   ('103', ('VBG', 'RP', 'DT')): [190, 1], ('103', ('RP', 'DT', 'NNS')): [191, 1],
                                   ('103', ('DT', 'NNS', 'IN')): [192, 1], ('103', ('NNS', 'IN', 'NN')): [193, 1],
                                   ('103', ('IN', 'NN', 'NN')): [194, 1], ('103', ('NN', 'NN', 'NNS')): [195, 1],
                                   ('103', ('NN', 'NNS', 'CC')): [196, 1], ('103', ('NNS', 'CC', 'DT')): [197, 1],
                                   ('103', ('CC', 'DT', 'JJ')): [198, 1], ('103', ('DT', 'JJ', 'NN')): [199, 1],
                                   ('103', ('JJ', 'NN', 'NNS')): [200, 1], ('103', ('NN', 'NNS', 'WDT')): [201, 1],
                                   ('103', ('NNS', 'WDT', 'VBP')): [202, 1], ('103', ('WDT', 'VBP', 'DT')): [203, 1],
                                   ('103', ('VBP', 'DT', 'NN')): [204, 1], ('103', ('DT', 'NN', 'IN')): [205, 1],
                                   ('103', ('NN', 'IN', 'VBG')): [206, 1], ('103', ('IN', 'VBG', 'NN')): [207, 1],
                                   ('103', ('VBG', 'NN', 'NN')): [208, 1], ('103', ('NN', 'NN', '.')): [209, 1],
                                   ('104', ('*', 'DT')): [210, 1], ('104', ('DT', 'NNP')): [211, 1],
                                   ('104', ('NNP', 'VBZ')): [212, 1], ('104', ('VBZ', 'RB')): [213, 1],
                                   ('104', ('RB', 'VBG')): [214, 1], ('104', ('VBG', 'RP')): [215, 1],
                                   ('104', ('RP', 'DT')): [216, 1], ('104', ('DT', 'NNS')): [217, 1],
                                   ('104', ('NNS', 'IN')): [218, 1], ('104', ('IN', 'NN')): [219, 1],
                                   ('104', ('NN', 'NN')): [220, 2], ('104', ('NN', 'NNS')): [221, 2],
                                   ('104', ('NNS', 'CC')): [222, 1], ('104', ('CC', 'DT')): [223, 1],
                                   ('104', ('DT', 'JJ')): [224, 1], ('104', ('JJ', 'NN')): [225, 1],
                                   ('104', ('NNS', 'WDT')): [226, 1], ('104', ('WDT', 'VBP')): [227, 1],
                                   ('104', ('VBP', 'DT')): [228, 1], ('104', ('DT', 'NN')): [229, 1],
                                   ('104', ('NN', 'IN')): [230, 1], ('104', ('IN', 'VBG')): [231, 1],
                                   ('104', ('VBG', 'NN')): [232, 1], ('104', ('NN', '.')): [233, 1],
                                   ('105', 'DT'): [234, 4], ('105', 'NNP'): [235, 1], ('105', 'VBZ'): [236, 1],
                                   ('105', 'RB'): [237, 1], ('105', 'VBG'): [238, 2], ('105', 'RP'): [239, 1],
                                   ('105', 'NNS'): [240, 3], ('105', 'IN'): [241, 2], ('105', 'NN'): [242, 6],
                                   ('105', 'CC'): [243, 1], ('105', 'JJ'): [244, 1], ('105', 'WDT'): [245, 1],
                                   ('105', 'VBP'): [246, 1], ('105', '.'): [247, 1]}
        self.assertEqual(feature.feature_vector, expected_feature_vector)

        feature = Feature("trialDataFiles/trialTwoSentences.wtag")
        feature.feature_100()
        feature.feature_101()
        feature.feature_102()
        feature.feature_103()
        feature.feature_104()
        feature.feature_105()
        expected_feature_vector = {('100', ('the', 'DT')): [0, 6], ('100', ('treasury', 'NNP')): [1, 2],
                                   ('100', ('is', 'VBZ')): [2, 2], ('100', ('still', 'RB')): [3, 1],
                                   ('100', ('working', 'VBG')): [4, 1], ('100', ('out', 'RP')): [5, 1],
                                   ('100', ('details', 'NNS')): [6, 1], ('100', ('with', 'IN')): [7, 1],
                                   ('100', ('bank', 'NN')): [8, 1], ('100', ('trade', 'NN')): [9, 1],
                                   ('100', ('associations', 'NNS')): [10, 1], ('100', ('and', 'CC')): [11, 2],
                                   ('100', ('other', 'JJ')): [12, 1], ('100', ('government', 'NN')): [13, 1],
                                   ('100', ('agencies', 'NNS')): [14, 1], ('100', ('that', 'WDT')): [15, 1],
                                   ('100', ('have', 'VBP')): [16, 1], ('100', ('a', 'DT')): [17, 1],
                                   ('100', ('hand', 'NN')): [18, 1], ('100', ('in', 'IN')): [19, 1],
                                   ('100', ('fighting', 'VBG')): [20, 1], ('100', ('money', 'NN')): [21, 1],
                                   ('100', ('laundering', 'NN')): [22, 1], ('100', ('.', '.')): [23, 2],
                                   ('100', ('among', 'IN')): [24, 1], ('100', ('possibilities', 'NNS')): [25, 1],
                                   ('100', ('considering', 'VBG')): [26, 1], ('100', ('are', 'VBP')): [27, 1],
                                   ('100', ('requirements', 'NNS')): [28, 1], ('100', ('that', 'IN')): [29, 1],
                                   ('100', ('banks', 'NNS')): [30, 1], ('100', ('keep', 'VB')): [31, 1],
                                   ('100', ('records', 'NNS')): [32, 1], ('100', ('identifying', 'VBG')): [33, 1],
                                   ('100', ('originators', 'NNS')): [34, 1], ('100', ('recipients', 'NNS')): [35, 1],
                                   ('100', ('of', 'IN')): [36, 1], ('100', ('international', 'JJ')): [37, 1],
                                   ('100', ('wire', 'NN')): [38, 1], ('100', ('transfers', 'NNS')): [39, 1],
                                   ('101', ('e', 'DT')): [40, 6], ('101', ('he', 'DT')): [41, 6],
                                   ('101', ('the', 'DT')): [42, 6], ('101', ('y', 'NNP')): [43, 2],
                                   ('101', ('ry', 'NNP')): [44, 2], ('101', ('ury', 'NNP')): [45, 2],
                                   ('101', ('sury', 'NNP')): [46, 2], ('101', ('s', 'VBZ')): [47, 2],
                                   ('101', ('is', 'VBZ')): [48, 2], ('101', ('l', 'RB')): [49, 1],
                                   ('101', ('ll', 'RB')): [50, 1], ('101', ('ill', 'RB')): [51, 1],
                                   ('101', ('till', 'RB')): [52, 1], ('101', ('g', 'VBG')): [53, 4],
                                   ('101', ('ng', 'VBG')): [54, 4], ('101', ('ing', 'VBG')): [55, 4],
                                   ('101', ('king', 'VBG')): [56, 1], ('101', ('t', 'RP')): [57, 1],
                                   ('101', ('ut', 'RP')): [58, 1], ('101', ('out', 'RP')): [59, 1],
                                   ('101', ('s', 'NNS')): [60, 10], ('101', ('ls', 'NNS')): [61, 1],
                                   ('101', ('ils', 'NNS')): [62, 1], ('101', ('ails', 'NNS')): [63, 1],
                                   ('101', ('h', 'IN')): [64, 1], ('101', ('th', 'IN')): [65, 1],
                                   ('101', ('ith', 'IN')): [66, 1], ('101', ('with', 'IN')): [67, 1],
                                   ('101', ('k', 'NN')): [68, 1], ('101', ('nk', 'NN')): [69, 1],
                                   ('101', ('ank', 'NN')): [70, 1], ('101', ('bank', 'NN')): [71, 1],
                                   ('101', ('e', 'NN')): [72, 2], ('101', ('de', 'NN')): [73, 1],
                                   ('101', ('ade', 'NN')): [74, 1], ('101', ('rade', 'NN')): [75, 1],
                                   ('101', ('ns', 'NNS')): [76, 1], ('101', ('ons', 'NNS')): [77, 1],
                                   ('101', ('ions', 'NNS')): [78, 1], ('101', ('d', 'CC')): [79, 2],
                                   ('101', ('nd', 'CC')): [80, 2], ('101', ('and', 'CC')): [81, 2],
                                   ('101', ('r', 'JJ')): [82, 1], ('101', ('er', 'JJ')): [83, 1],
                                   ('101', ('her', 'JJ')): [84, 1], ('101', ('ther', 'JJ')): [85, 1],
                                   ('101', ('t', 'NN')): [86, 1], ('101', ('nt', 'NN')): [87, 1],
                                   ('101', ('ent', 'NN')): [88, 1], ('101', ('ment', 'NN')): [89, 1],
                                   ('101', ('es', 'NNS')): [90, 2], ('101', ('ies', 'NNS')): [91, 2],
                                   ('101', ('cies', 'NNS')): [92, 1], ('101', ('t', 'WDT')): [93, 1],
                                   ('101', ('at', 'WDT')): [94, 1], ('101', ('hat', 'WDT')): [95, 1],
                                   ('101', ('that', 'WDT')): [96, 1], ('101', ('e', 'VBP')): [97, 2],
                                   ('101', ('ve', 'VBP')): [98, 1], ('101', ('ave', 'VBP')): [99, 1],
                                   ('101', ('have', 'VBP')): [100, 1], ('101', ('a', 'DT')): [101, 1],
                                   ('101', ('d', 'NN')): [102, 1], ('101', ('nd', 'NN')): [103, 1],
                                   ('101', ('and', 'NN')): [104, 1], ('101', ('hand', 'NN')): [105, 1],
                                   ('101', ('n', 'IN')): [106, 1], ('101', ('in', 'IN')): [107, 1],
                                   ('101', ('ting', 'VBG')): [108, 1], ('101', ('y', 'NN')): [109, 1],
                                   ('101', ('ey', 'NN')): [110, 1], ('101', ('ney', 'NN')): [111, 1],
                                   ('101', ('oney', 'NN')): [112, 1], ('101', ('g', 'NN')): [113, 1],
                                   ('101', ('ng', 'NN')): [114, 1], ('101', ('ing', 'NN')): [115, 1],
                                   ('101', ('ring', 'NN')): [116, 1], ('101', ('.', '.')): [117, 2],
                                   ('101', ('g', 'IN')): [118, 1], ('101', ('ng', 'IN')): [119, 1],
                                   ('101', ('ong', 'IN')): [120, 1], ('101', ('mong', 'IN')): [121, 1],
                                   ('101', ('ties', 'NNS')): [122, 1], ('101', ('ring', 'VBG')): [123, 1],
                                   ('101', ('re', 'VBP')): [124, 1], ('101', ('are', 'VBP')): [125, 1],
                                   ('101', ('ts', 'NNS')): [126, 2], ('101', ('nts', 'NNS')): [127, 2],
                                   ('101', ('ents', 'NNS')): [128, 2], ('101', ('t', 'IN')): [129, 1],
                                   ('101', ('at', 'IN')): [130, 1], ('101', ('hat', 'IN')): [131, 1],
                                   ('101', ('that', 'IN')): [132, 1], ('101', ('ks', 'NNS')): [133, 1],
                                   ('101', ('nks', 'NNS')): [134, 1], ('101', ('anks', 'NNS')): [135, 1],
                                   ('101', ('p', 'VB')): [136, 1], ('101', ('ep', 'VB')): [137, 1],
                                   ('101', ('eep', 'VB')): [138, 1], ('101', ('keep', 'VB')): [139, 1],
                                   ('101', ('ds', 'NNS')): [140, 1], ('101', ('rds', 'NNS')): [141, 1],
                                   ('101', ('ords', 'NNS')): [142, 1], ('101', ('ying', 'VBG')): [143, 1],
                                   ('101', ('rs', 'NNS')): [144, 2], ('101', ('ors', 'NNS')): [145, 1],
                                   ('101', ('tors', 'NNS')): [146, 1], ('101', ('f', 'IN')): [147, 1],
                                   ('101', ('of', 'IN')): [148, 1], ('101', ('l', 'JJ')): [149, 1],
                                   ('101', ('al', 'JJ')): [150, 1], ('101', ('nal', 'JJ')): [151, 1],
                                   ('101', ('onal', 'JJ')): [152, 1], ('101', ('re', 'NN')): [153, 1],
                                   ('101', ('ire', 'NN')): [154, 1], ('101', ('wire', 'NN')): [155, 1],
                                   ('101', ('ers', 'NNS')): [156, 1], ('101', ('fers', 'NNS')): [157, 1],
                                   ('102', ('t', 'DT')): [158, 6], ('102', ('th', 'DT')): [159, 6],
                                   ('102', ('the', 'DT')): [160, 6], ('102', ('t', 'NNP')): [161, 2],
                                   ('102', ('tr', 'NNP')): [162, 2], ('102', ('tre', 'NNP')): [163, 2],
                                   ('102', ('trea', 'NNP')): [164, 2], ('102', ('i', 'VBZ')): [165, 2],
                                   ('102', ('is', 'VBZ')): [166, 2], ('102', ('s', 'RB')): [167, 1],
                                   ('102', ('st', 'RB')): [168, 1], ('102', ('sti', 'RB')): [169, 1],
                                   ('102', ('stil', 'RB')): [170, 1], ('102', ('w', 'VBG')): [171, 1],
                                   ('102', ('wo', 'VBG')): [172, 1], ('102', ('wor', 'VBG')): [173, 1],
                                   ('102', ('work', 'VBG')): [174, 1], ('102', ('o', 'RP')): [175, 1],
                                   ('102', ('ou', 'RP')): [176, 1], ('102', ('out', 'RP')): [177, 1],
                                   ('102', ('d', 'NNS')): [178, 1], ('102', ('de', 'NNS')): [179, 1],
                                   ('102', ('det', 'NNS')): [180, 1], ('102', ('deta', 'NNS')): [181, 1],
                                   ('102', ('w', 'IN')): [182, 1], ('102', ('wi', 'IN')): [183, 1],
                                   ('102', ('wit', 'IN')): [184, 1], ('102', ('with', 'IN')): [185, 1],
                                   ('102', ('b', 'NN')): [186, 1], ('102', ('ba', 'NN')): [187, 1],
                                   ('102', ('ban', 'NN')): [188, 1], ('102', ('bank', 'NN')): [189, 1],
                                   ('102', ('t', 'NN')): [190, 1], ('102', ('tr', 'NN')): [191, 1],
                                   ('102', ('tra', 'NN')): [192, 1], ('102', ('trad', 'NN')): [193, 1],
                                   ('102', ('a', 'NNS')): [194, 2], ('102', ('as', 'NNS')): [195, 1],
                                   ('102', ('ass', 'NNS')): [196, 1], ('102', ('asso', 'NNS')): [197, 1],
                                   ('102', ('a', 'CC')): [198, 2], ('102', ('an', 'CC')): [199, 2],
                                   ('102', ('and', 'CC')): [200, 2], ('102', ('o', 'JJ')): [201, 1],
                                   ('102', ('ot', 'JJ')): [202, 1], ('102', ('oth', 'JJ')): [203, 1],
                                   ('102', ('othe', 'JJ')): [204, 1], ('102', ('g', 'NN')): [205, 1],
                                   ('102', ('go', 'NN')): [206, 1], ('102', ('gov', 'NN')): [207, 1],
                                   ('102', ('gove', 'NN')): [208, 1], ('102', ('ag', 'NNS')): [209, 1],
                                   ('102', ('age', 'NNS')): [210, 1], ('102', ('agen', 'NNS')): [211, 1],
                                   ('102', ('t', 'WDT')): [212, 1], ('102', ('th', 'WDT')): [213, 1],
                                   ('102', ('tha', 'WDT')): [214, 1], ('102', ('that', 'WDT')): [215, 1],
                                   ('102', ('h', 'VBP')): [216, 1], ('102', ('ha', 'VBP')): [217, 1],
                                   ('102', ('hav', 'VBP')): [218, 1], ('102', ('have', 'VBP')): [219, 1],
                                   ('102', ('a', 'DT')): [220, 1], ('102', ('h', 'NN')): [221, 1],
                                   ('102', ('ha', 'NN')): [222, 1], ('102', ('han', 'NN')): [223, 1],
                                   ('102', ('hand', 'NN')): [224, 1], ('102', ('i', 'IN')): [225, 1],
                                   ('102', ('in', 'IN')): [226, 1], ('102', ('f', 'VBG')): [227, 1],
                                   ('102', ('fi', 'VBG')): [228, 1], ('102', ('fig', 'VBG')): [229, 1],
                                   ('102', ('figh', 'VBG')): [230, 1], ('102', ('m', 'NN')): [231, 1],
                                   ('102', ('mo', 'NN')): [232, 1], ('102', ('mon', 'NN')): [233, 1],
                                   ('102', ('mone', 'NN')): [234, 1], ('102', ('l', 'NN')): [235, 1],
                                   ('102', ('la', 'NN')): [236, 1], ('102', ('lau', 'NN')): [237, 1],
                                   ('102', ('laun', 'NN')): [238, 1], ('102', ('.', '.')): [239, 2],
                                   ('102', ('a', 'IN')): [240, 1], ('102', ('am', 'IN')): [241, 1],
                                   ('102', ('amo', 'IN')): [242, 1], ('102', ('amon', 'IN')): [243, 1],
                                   ('102', ('p', 'NNS')): [244, 1], ('102', ('po', 'NNS')): [245, 1],
                                   ('102', ('pos', 'NNS')): [246, 1], ('102', ('poss', 'NNS')): [247, 1],
                                   ('102', ('c', 'VBG')): [248, 1], ('102', ('co', 'VBG')): [249, 1],
                                   ('102', ('con', 'VBG')): [250, 1], ('102', ('cons', 'VBG')): [251, 1],
                                   ('102', ('a', 'VBP')): [252, 1], ('102', ('ar', 'VBP')): [253, 1],
                                   ('102', ('are', 'VBP')): [254, 1], ('102', ('r', 'NNS')): [255, 3],
                                   ('102', ('re', 'NNS')): [256, 3], ('102', ('req', 'NNS')): [257, 1],
                                   ('102', ('requ', 'NNS')): [258, 1], ('102', ('t', 'IN')): [259, 1],
                                   ('102', ('th', 'IN')): [260, 1], ('102', ('tha', 'IN')): [261, 1],
                                   ('102', ('that', 'IN')): [262, 1], ('102', ('b', 'NNS')): [263, 1],
                                   ('102', ('ba', 'NNS')): [264, 1], ('102', ('ban', 'NNS')): [265, 1],
                                   ('102', ('bank', 'NNS')): [266, 1], ('102', ('k', 'VB')): [267, 1],
                                   ('102', ('ke', 'VB')): [268, 1], ('102', ('kee', 'VB')): [269, 1],
                                   ('102', ('keep', 'VB')): [270, 1], ('102', ('rec', 'NNS')): [271, 2],
                                   ('102', ('reco', 'NNS')): [272, 1], ('102', ('i', 'VBG')): [273, 1],
                                   ('102', ('id', 'VBG')): [274, 1], ('102', ('ide', 'VBG')): [275, 1],
                                   ('102', ('iden', 'VBG')): [276, 1], ('102', ('o', 'NNS')): [277, 1],
                                   ('102', ('or', 'NNS')): [278, 1], ('102', ('ori', 'NNS')): [279, 1],
                                   ('102', ('orig', 'NNS')): [280, 1], ('102', ('reci', 'NNS')): [281, 1],
                                   ('102', ('o', 'IN')): [282, 1], ('102', ('of', 'IN')): [283, 1],
                                   ('102', ('i', 'JJ')): [284, 1], ('102', ('in', 'JJ')): [285, 1],
                                   ('102', ('int', 'JJ')): [286, 1], ('102', ('inte', 'JJ')): [287, 1],
                                   ('102', ('w', 'NN')): [288, 1], ('102', ('wi', 'NN')): [289, 1],
                                   ('102', ('wir', 'NN')): [290, 1], ('102', ('wire', 'NN')): [291, 1],
                                   ('102', ('t', 'NNS')): [292, 1], ('102', ('tr', 'NNS')): [293, 1],
                                   ('102', ('tra', 'NNS')): [294, 1], ('102', ('tran', 'NNS')): [295, 1],
                                   ('103', ('*', '*', 'DT')): [296, 1], ('103', ('*', 'DT', 'NNP')): [297, 1],
                                   ('103', ('DT', 'NNP', 'VBZ')): [298, 2], ('103', ('NNP', 'VBZ', 'RB')): [299, 1],
                                   ('103', ('VBZ', 'RB', 'VBG')): [300, 1], ('103', ('RB', 'VBG', 'RP')): [301, 1],
                                   ('103', ('VBG', 'RP', 'DT')): [302, 1], ('103', ('RP', 'DT', 'NNS')): [303, 1],
                                   ('103', ('DT', 'NNS', 'IN')): [304, 1], ('103', ('NNS', 'IN', 'NN')): [305, 1],
                                   ('103', ('IN', 'NN', 'NN')): [306, 1], ('103', ('NN', 'NN', 'NNS')): [307, 1],
                                   ('103', ('NN', 'NNS', 'CC')): [308, 1], ('103', ('NNS', 'CC', 'DT')): [309, 1],
                                   ('103', ('CC', 'DT', 'JJ')): [310, 1], ('103', ('DT', 'JJ', 'NN')): [311, 1],
                                   ('103', ('JJ', 'NN', 'NNS')): [312, 2], ('103', ('NN', 'NNS', 'WDT')): [313, 1],
                                   ('103', ('NNS', 'WDT', 'VBP')): [314, 1], ('103', ('WDT', 'VBP', 'DT')): [315, 1],
                                   ('103', ('VBP', 'DT', 'NN')): [316, 1], ('103', ('DT', 'NN', 'IN')): [317, 1],
                                   ('103', ('NN', 'IN', 'VBG')): [318, 1], ('103', ('IN', 'VBG', 'NN')): [319, 1],
                                   ('103', ('VBG', 'NN', 'NN')): [320, 1], ('103', ('NN', 'NN', '.')): [321, 1],
                                   ('103', ('*', '*', 'IN')): [322, 1], ('103', ('*', 'IN', 'DT')): [323, 1],
                                   ('103', ('IN', 'DT', 'NNS')): [324, 1], ('103', ('DT', 'NNS', 'DT')): [325, 1],
                                   ('103', ('NNS', 'DT', 'NNP')): [326, 1], ('103', ('NNP', 'VBZ', 'VBG')): [327, 1],
                                   ('103', ('VBZ', 'VBG', 'VBP')): [328, 1], ('103', ('VBG', 'VBP', 'NNS')): [329, 1],
                                   ('103', ('VBP', 'NNS', 'IN')): [330, 1], ('103', ('NNS', 'IN', 'NNS')): [331, 1],
                                   ('103', ('IN', 'NNS', 'VB')): [332, 1], ('103', ('NNS', 'VB', 'NNS')): [333, 1],
                                   ('103', ('VB', 'NNS', 'VBG')): [334, 1], ('103', ('NNS', 'VBG', 'DT')): [335, 1],
                                   ('103', ('VBG', 'DT', 'NNS')): [336, 1], ('103', ('DT', 'NNS', 'CC')): [337, 1],
                                   ('103', ('NNS', 'CC', 'NNS')): [338, 1], ('103', ('CC', 'NNS', 'IN')): [339, 1],
                                   ('103', ('NNS', 'IN', 'JJ')): [340, 1], ('103', ('IN', 'JJ', 'NN')): [341, 1],
                                   ('103', ('NN', 'NNS', '.')): [342, 1], ('104', ('*', 'DT')): [343, 1],
                                   ('104', ('DT', 'NNP')): [344, 2], ('104', ('NNP', 'VBZ')): [345, 2],
                                   ('104', ('VBZ', 'RB')): [346, 1], ('104', ('RB', 'VBG')): [347, 1],
                                   ('104', ('VBG', 'RP')): [348, 1], ('104', ('RP', 'DT')): [349, 1],
                                   ('104', ('DT', 'NNS')): [350, 3], ('104', ('NNS', 'IN')): [351, 3],
                                   ('104', ('IN', 'NN')): [352, 1], ('104', ('NN', 'NN')): [353, 2],
                                   ('104', ('NN', 'NNS')): [354, 3], ('104', ('NNS', 'CC')): [355, 2],
                                   ('104', ('CC', 'DT')): [356, 1], ('104', ('DT', 'JJ')): [357, 1],
                                   ('104', ('JJ', 'NN')): [358, 2], ('104', ('NNS', 'WDT')): [359, 1],
                                   ('104', ('WDT', 'VBP')): [360, 1], ('104', ('VBP', 'DT')): [361, 1],
                                   ('104', ('DT', 'NN')): [362, 1], ('104', ('NN', 'IN')): [363, 1],
                                   ('104', ('IN', 'VBG')): [364, 1], ('104', ('VBG', 'NN')): [365, 1],
                                   ('104', ('NN', '.')): [366, 1], ('104', ('*', 'IN')): [367, 1],
                                   ('104', ('IN', 'DT')): [368, 1], ('104', ('NNS', 'DT')): [369, 1],
                                   ('104', ('VBZ', 'VBG')): [370, 1], ('104', ('VBG', 'VBP')): [371, 1],
                                   ('104', ('VBP', 'NNS')): [372, 1], ('104', ('IN', 'NNS')): [373, 1],
                                   ('104', ('NNS', 'VB')): [374, 1], ('104', ('VB', 'NNS')): [375, 1],
                                   ('104', ('NNS', 'VBG')): [376, 1], ('104', ('VBG', 'DT')): [377, 1],
                                   ('104', ('CC', 'NNS')): [378, 1], ('104', ('IN', 'JJ')): [379, 1],
                                   ('104', ('NNS', '.')): [380, 1], ('105', 'DT'): [381, 7], ('105', 'NNP'): [382, 2],
                                   ('105', 'VBZ'): [383, 2], ('105', 'RB'): [384, 1], ('105', 'VBG'): [385, 4],
                                   ('105', 'RP'): [386, 1], ('105', 'NNS'): [387, 10], ('105', 'IN'): [388, 5],
                                   ('105', 'NN'): [389, 7], ('105', 'CC'): [390, 2], ('105', 'JJ'): [391, 2],
                                   ('105', 'WDT'): [392, 1], ('105', 'VBP'): [393, 2], ('105', '.'): [394, 2],
                                   ('105', 'VB'): [395, 1]}
        self.assertEqual(feature.feature_vector, expected_feature_vector)

        feature = Feature("../" + Consts.PATH_TO_TRAINING)
        feature.feature_100()
        feature.feature_101()
        feature.feature_102()
        feature.feature_103()
        feature.feature_104()
        feature.feature_105()

        with open("trialDataFiles/outputAllFeatures.output", 'r+') as f:
            print(feature.feature_vector, file=f)
            f.seek(0, 0)
            file1_data = f.read()
        with open("trialDataFiles/expectedAllFeatures.output") as f:
            file2_data = f.read()

        self.assertEqual(file1_data, file2_data)

    def test_history_matched_features(self):
        feature = Feature("../" + Consts.PATH_TO_TRAINING)
        feature.feature_100()
        feature.feature_101()
        feature.feature_102()
        feature.feature_103()
        feature.feature_104()
        feature.feature_105()
        histories, tags = Histories.build_history_list_and_tags_list("trialDataFiles/trialOneSentence.wtag")
        self.assertEqual(feature.history_matched_features(histories[0], tags[0]), [0, 14719, 27327, 14720, 27328, 14721, 27329, 47483, 55633, 56693])


if __name__ == '__main__':
    unittest.main()
